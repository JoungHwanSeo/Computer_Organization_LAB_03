$date
	Thu May 26 20:02:59 2022
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module riscv_tb $end
$var reg 32 ! LAST_PC [31:0] $end
$var reg 1 " clk $end
$var reg 1 # rstn $end
$var integer 32 $ fd [31:0] $end
$var integer 32 % i [31:0] $end
$var integer 32 & n_instructions [31:0] $end
$var integer 32 ' position [31:0] $end
$scope module my_cpu $end
$var wire 32 ( IF_PC [31:0] $end
$var wire 1 " clk $end
$var wire 32 ) forwarded_alu_second [31:0] $end
$var wire 1 * real_ID_flush $end
$var wire 1 # rstn $end
$var wire 1 + stall $end
$var wire 32 , alu_in_2 [31:0] $end
$var wire 32 - alu_in_1 [31:0] $end
$var wire 32 . WB_tmp_write_data [31:0] $end
$var wire 1 / WB_regwrite $end
$var wire 32 0 WB_readdata [31:0] $end
$var wire 5 1 WB_rd [4:0] $end
$var wire 7 2 WB_opcode [6:0] $end
$var wire 1 3 WB_memtoreg $end
$var wire 2 4 WB_jump [1:0] $end
$var wire 32 5 WB_alu_result [31:0] $end
$var wire 32 6 WB_PC_PLUS_4 [31:0] $end
$var wire 32 7 NEXT_PC [31:0] $end
$var wire 32 8 MEM_writedata [31:0] $end
$var wire 32 9 MEM_write_data_real [31:0] $end
$var wire 1 : MEM_taken $end
$var wire 5 ; MEM_rs2 [4:0] $end
$var wire 1 < MEM_regwrite $end
$var wire 5 = MEM_rd [4:0] $end
$var wire 7 > MEM_opcode [6:0] $end
$var wire 1 ? MEM_memwrite $end
$var wire 1 @ MEM_memtoreg $end
$var wire 1 A MEM_memread $end
$var wire 32 B MEM_mem_read_data [31:0] $end
$var wire 2 C MEM_jump [1:0] $end
$var wire 3 D MEM_funct3 [2:0] $end
$var wire 32 E MEM_alu_result [31:0] $end
$var wire 32 F MEM_PC_target [31:0] $end
$var wire 32 G MEM_PC_PLUS_4 [31:0] $end
$var wire 32 H IF_instruction [31:0] $end
$var wire 1 I IF_flush $end
$var wire 32 J IF_PC_PLUS_4 [31:0] $end
$var wire 32 K ID_sextimm [31:0] $end
$var wire 5 L ID_rs2 [4:0] $end
$var wire 5 M ID_rs1 [4:0] $end
$var wire 1 N ID_reg_write_tmp $end
$var wire 1 O ID_reg_write $end
$var wire 32 P ID_readdata2 [31:0] $end
$var wire 32 Q ID_readdata1 [31:0] $end
$var wire 5 R ID_rd [4:0] $end
$var wire 7 S ID_opcode [6:0] $end
$var wire 1 T ID_mem_write_tmp $end
$var wire 1 U ID_mem_write $end
$var wire 1 V ID_mem_to_reg $end
$var wire 1 W ID_mem_read $end
$var wire 2 X ID_jump [1:0] $end
$var wire 32 Y ID_instruction [31:0] $end
$var wire 7 Z ID_funct7 [6:0] $end
$var wire 3 [ ID_funct3 [2:0] $end
$var wire 1 \ ID_flush $end
$var wire 10 ] ID_control [9:0] $end
$var wire 1 ^ ID_branch $end
$var wire 1 _ ID_alu_src $end
$var wire 2 ` ID_alu_op [1:0] $end
$var wire 32 a ID_PC_PLUS_4 [31:0] $end
$var wire 32 b ID_PC [31:0] $end
$var wire 1 c EX_taken $end
$var wire 32 d EX_sextimm [31:0] $end
$var wire 5 e EX_rs2 [4:0] $end
$var wire 5 f EX_rs1 [4:0] $end
$var wire 1 g EX_regwrite $end
$var wire 32 h EX_readdata2 [31:0] $end
$var wire 32 i EX_readdata1 [31:0] $end
$var wire 5 j EX_rd [4:0] $end
$var wire 7 k EX_opcode [6:0] $end
$var wire 1 l EX_memwrite $end
$var wire 1 m EX_memtoreg $end
$var wire 1 n EX_memread $end
$var wire 2 o EX_jump [1:0] $end
$var wire 7 p EX_funct7 [6:0] $end
$var wire 3 q EX_funct3 [2:0] $end
$var wire 1 r EX_forwardM $end
$var wire 10 s EX_control [9:0] $end
$var wire 1 t EX_check $end
$var wire 1 u EX_branch $end
$var wire 1 v EX_alusrc $end
$var wire 2 w EX_aluop [1:0] $end
$var wire 32 x EX_Writedata [31:0] $end
$var wire 32 y EX_PC_branch_target [31:0] $end
$var wire 32 z EX_PC_PLUS_4 [31:0] $end
$var wire 32 { EX_PC [31:0] $end
$var wire 2 | EX_ForwardS [1:0] $end
$var wire 2 } EX_ForwardB [1:0] $end
$var wire 2 ~ EX_ForwardA [1:0] $end
$var wire 32 !" EX_ALU_result [31:0] $end
$var wire 32 "" EX_ALU_in [31:0] $end
$var wire 4 #" EX_ALU_func [3:0] $end
$var reg 1 $" JALR_dependence $end
$var reg 32 %" PC [31:0] $end
$var reg 32 &" WB_write_data [31:0] $end
$var reg 32 '" forwarded_alu_second_tmp [31:0] $end
$var reg 2 (" maskmode [1:0] $end
$var reg 1 )" sext $end
$scope module EX_write_data_mux $end
$var wire 32 *" in2 [31:0] $end
$var wire 32 +" in3 [31:0] $end
$var wire 2 ," select [1:0] $end
$var wire 32 -" in1 [31:0] $end
$var reg 32 ." out [31:0] $end
$upscope $end
$scope module alu_in_1_mux $end
$var wire 32 /" in2 [31:0] $end
$var wire 32 0" in3 [31:0] $end
$var wire 2 1" select [1:0] $end
$var wire 32 2" in1 [31:0] $end
$var reg 32 3" out [31:0] $end
$upscope $end
$scope module alu_in_2_mux $end
$var wire 32 4" in2 [31:0] $end
$var wire 32 5" in3 [31:0] $end
$var wire 2 6" select [1:0] $end
$var wire 32 7" in1 [31:0] $end
$var reg 32 8" out [31:0] $end
$upscope $end
$scope module m_alu $end
$var wire 32 9" in_a [31:0] $end
$var wire 32 :" in_b [31:0] $end
$var wire 4 ;" alu_func [3:0] $end
$var reg 1 t check $end
$var reg 32 <" result [31:0] $end
$upscope $end
$scope module m_alu_control $end
$var wire 7 =" funct7 [6:0] $end
$var wire 3 >" funct3 [2:0] $end
$var wire 4 ?" funct [3:0] $end
$var wire 2 @" alu_op [1:0] $end
$var reg 4 A" alu_func [3:0] $end
$upscope $end
$scope module m_alu_mux $end
$var wire 1 v select $end
$var wire 32 B" in2 [31:0] $end
$var wire 32 C" in1 [31:0] $end
$var reg 32 D" out [31:0] $end
$upscope $end
$scope module m_branch_control $end
$var wire 1 t check $end
$var wire 1 u branch $end
$var reg 1 c taken $end
$upscope $end
$scope module m_branch_target_adder $end
$var wire 32 E" in_b [31:0] $end
$var wire 32 F" in_a [31:0] $end
$var reg 32 G" result [31:0] $end
$upscope $end
$scope module m_control $end
$var wire 7 H" opcode [6:0] $end
$var wire 1 N reg_write $end
$var wire 1 T mem_write $end
$var wire 1 V mem_to_reg $end
$var wire 1 W mem_read $end
$var wire 2 I" jump [1:0] $end
$var wire 1 \ id_flush $end
$var wire 1 ^ branch $end
$var wire 1 _ alu_src $end
$var wire 2 J" alu_op [1:0] $end
$var reg 10 K" controls [9:0] $end
$upscope $end
$scope module m_data_memory $end
$var wire 1 " clk $end
$var wire 2 L" maskmode [1:0] $end
$var wire 1 )" sext $end
$var wire 32 M" write_data [31:0] $end
$var wire 1 ? mem_write $end
$var wire 1 A mem_read $end
$var wire 13 N" address_internal [12:0] $end
$var wire 32 O" address [31:0] $end
$var reg 32 P" read_data [31:0] $end
$upscope $end
$scope module m_exmem_reg $end
$var wire 1 " clk $end
$var wire 32 Q" ex_alu_result [31:0] $end
$var wire 32 R" ex_pc_target [31:0] $end
$var wire 1 c ex_taken $end
$var wire 32 S" ex_writedata [31:0] $end
$var wire 5 T" ex_rs2 [4:0] $end
$var wire 1 g ex_regwrite $end
$var wire 5 U" ex_rd [4:0] $end
$var wire 32 V" ex_pc_plus_4 [31:0] $end
$var wire 7 W" ex_opcode [6:0] $end
$var wire 1 l ex_memwrite $end
$var wire 1 m ex_memtoreg $end
$var wire 1 n ex_memread $end
$var wire 2 X" ex_jump [1:0] $end
$var wire 3 Y" ex_funct3 [2:0] $end
$var reg 32 Z" mem_alu_result [31:0] $end
$var reg 3 [" mem_funct3 [2:0] $end
$var reg 2 \" mem_jump [1:0] $end
$var reg 1 A mem_memread $end
$var reg 1 @ mem_memtoreg $end
$var reg 1 ? mem_memwrite $end
$var reg 7 ]" mem_opcode [6:0] $end
$var reg 32 ^" mem_pc_plus_4 [31:0] $end
$var reg 32 _" mem_pc_target [31:0] $end
$var reg 5 `" mem_rd [4:0] $end
$var reg 1 < mem_regwrite $end
$var reg 5 a" mem_rs2 [4:0] $end
$var reg 1 : mem_taken $end
$var reg 32 b" mem_writedata [31:0] $end
$upscope $end
$scope module m_forwarding $end
$var wire 7 c" mem_opcode [6:0] $end
$var wire 5 d" mem_rd [4:0] $end
$var wire 5 e" mem_rs2 [4:0] $end
$var wire 5 f" wb_rd [4:0] $end
$var wire 7 g" wb_opcode [6:0] $end
$var wire 5 h" ex_rs2 [4:0] $end
$var wire 5 i" ex_rs1 [4:0] $end
$var wire 7 j" ex_opcode [6:0] $end
$var reg 2 k" forwardA [1:0] $end
$var reg 2 l" forwardB [1:0] $end
$var reg 2 m" forwardS [1:0] $end
$var reg 1 r forwardmem $end
$upscope $end
$scope module m_hazard $end
$var wire 32 n" ex_alu_result [31:0] $end
$var wire 1 c ex_branch_taken $end
$var wire 32 o" ex_branch_target [31:0] $end
$var wire 1 T id_mem_write $end
$var wire 7 p" id_opcode [6:0] $end
$var wire 1 N id_reg_write $end
$var wire 5 q" id_rs1 [4:0] $end
$var wire 5 r" id_rs2 [4:0] $end
$var wire 32 s" if_pc_plus_4 [31:0] $end
$var wire 1 I if_flush $end
$var wire 5 t" ex_rd [4:0] $end
$var wire 7 u" ex_opcode [6:0] $end
$var wire 2 v" ex_jump [1:0] $end
$var reg 1 w" Load_dep_1 $end
$var reg 1 x" Load_dep_2 $end
$var reg 32 y" NEXT_PC [31:0] $end
$var reg 1 z" ex_mem_flush $end
$var reg 1 U id_mem_write_real $end
$var reg 1 O id_reg_write_real $end
$var reg 1 I if_flush_tmp $end
$var reg 1 + stall $end
$upscope $end
$scope module m_idex_reg $end
$var wire 1 " clk $end
$var wire 1 * flush $end
$var wire 2 {" id_aluop [1:0] $end
$var wire 1 _ id_alusrc $end
$var wire 1 ^ id_branch $end
$var wire 3 |" id_funct3 [2:0] $end
$var wire 7 }" id_funct7 [6:0] $end
$var wire 2 ~" id_jump [1:0] $end
$var wire 1 W id_memread $end
$var wire 1 V id_memtoreg $end
$var wire 1 U id_memwrite $end
$var wire 7 !# id_opcode [6:0] $end
$var wire 5 "# id_rd [4:0] $end
$var wire 1 O id_regwrite $end
$var wire 5 ## id_rs1 [4:0] $end
$var wire 5 $# id_rs2 [4:0] $end
$var wire 1 + stall $end
$var wire 32 %# id_sextimm [31:0] $end
$var wire 32 &# id_readdata2 [31:0] $end
$var wire 32 '# id_readdata1 [31:0] $end
$var wire 32 (# id_pc_plus_4 [31:0] $end
$var wire 32 )# id_PC [31:0] $end
$var reg 32 *# ex_PC [31:0] $end
$var reg 2 +# ex_aluop [1:0] $end
$var reg 1 v ex_alusrc $end
$var reg 1 u ex_branch $end
$var reg 3 ,# ex_funct3 [2:0] $end
$var reg 7 -# ex_funct7 [6:0] $end
$var reg 2 .# ex_jump [1:0] $end
$var reg 1 n ex_memread $end
$var reg 1 m ex_memtoreg $end
$var reg 1 l ex_memwrite $end
$var reg 7 /# ex_opcode [6:0] $end
$var reg 32 0# ex_pc_plus_4 [31:0] $end
$var reg 5 1# ex_rd [4:0] $end
$var reg 32 2# ex_readdata1 [31:0] $end
$var reg 32 3# ex_readdata2 [31:0] $end
$var reg 1 g ex_regwrite $end
$var reg 5 4# ex_rs1 [4:0] $end
$var reg 5 5# ex_rs2 [4:0] $end
$var reg 32 6# ex_sextimm [31:0] $end
$upscope $end
$scope module m_ifid_reg $end
$var wire 1 " clk $end
$var wire 32 7# if_PC [31:0] $end
$var wire 1 I if_flush $end
$var wire 1 + stall $end
$var wire 32 8# if_pc_plus_4 [31:0] $end
$var wire 32 9# if_instruction [31:0] $end
$var reg 32 :# id_PC [31:0] $end
$var reg 1 \ id_flush $end
$var reg 32 ;# id_instruction [31:0] $end
$var reg 32 <# id_pc_plus_4 [31:0] $end
$upscope $end
$scope module m_immediate_generator $end
$var wire 32 =# instruction [31:0] $end
$var wire 7 ># opcode [6:0] $end
$var reg 32 ?# sextimm [31:0] $end
$upscope $end
$scope module m_instruction_memory $end
$var wire 32 @# address [31:0] $end
$var reg 32 A# instruction [31:0] $end
$upscope $end
$scope module m_memwb_reg $end
$var wire 1 " clk $end
$var wire 32 B# mem_alu_result [31:0] $end
$var wire 2 C# mem_jump [1:0] $end
$var wire 1 @ mem_memtoreg $end
$var wire 7 D# mem_opcode [6:0] $end
$var wire 32 E# mem_pc_plus_4 [31:0] $end
$var wire 5 F# mem_rd [4:0] $end
$var wire 32 G# mem_readdata [31:0] $end
$var wire 1 < mem_regwrite $end
$var reg 32 H# wb_alu_result [31:0] $end
$var reg 2 I# wb_jump [1:0] $end
$var reg 1 3 wb_memtoreg $end
$var reg 7 J# wb_opcode [6:0] $end
$var reg 32 K# wb_pc_plus_4 [31:0] $end
$var reg 5 L# wb_rd [4:0] $end
$var reg 32 M# wb_readdata [31:0] $end
$var reg 1 / wb_regwrite $end
$upscope $end
$scope module m_mux_2x1 $end
$var wire 32 N# in1 [31:0] $end
$var wire 32 O# in2 [31:0] $end
$var wire 1 3 select $end
$var reg 32 P# out [31:0] $end
$upscope $end
$scope module m_pc_plus_4_adder $end
$var wire 32 Q# in_a [31:0] $end
$var wire 32 R# in_b [31:0] $end
$var reg 32 S# result [31:0] $end
$upscope $end
$scope module m_register_file $end
$var wire 1 " clk $end
$var wire 32 T# readdata1 [31:0] $end
$var wire 32 U# readdata2 [31:0] $end
$var wire 5 V# readreg1 [4:0] $end
$var wire 5 W# readreg2 [4:0] $end
$var wire 1 / wen $end
$var wire 32 X# writedata [31:0] $end
$var wire 5 Y# writereg [4:0] $end
$upscope $end
$scope module m_write_data_mux $end
$var wire 32 Z# in1 [31:0] $end
$var wire 32 [# in2 [31:0] $end
$var wire 1 r select $end
$var reg 32 \# out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx \#
bx [#
bx Z#
bx Y#
bx X#
bx W#
bx V#
bx U#
bx T#
bx S#
bx R#
b100 Q#
bx P#
bx O#
bx N#
bx M#
bx L#
bx K#
bx J#
bx I#
bx H#
b0 G#
bx F#
bx E#
bx D#
bx C#
bx B#
bx A#
bx @#
bx ?#
bx >#
bx =#
bx <#
bx ;#
bx :#
bx 9#
bx 8#
bx 7#
bx 6#
bx 5#
bx 4#
bx 3#
bx 2#
bx 1#
bx 0#
bx /#
bx .#
bx -#
bx ,#
bx +#
bx *#
bx )#
bx (#
bx '#
bx &#
bx %#
bx $#
bx ##
bx "#
bx !#
bx ~"
bx }"
bx |"
bx {"
xz"
bx y"
xx"
xw"
bx v"
bx u"
bx t"
bx s"
bx r"
bx q"
bx p"
bx o"
bx n"
bx m"
bx l"
bx k"
bx j"
bx i"
bx h"
bx g"
bx f"
bx e"
bx d"
bx c"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
b0 P"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
bx E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
x)"
bx ("
bx '"
bx &"
bx %"
x$"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
xv
xu
xt
bx s
xr
bx q
bx p
bx o
xn
xm
xl
bx k
bx j
bx i
bx h
xg
bx f
bx e
bx d
xc
bx b
bx a
bx `
x_
x^
bx ]
x\
bx [
bx Z
bx Y
bx X
xW
xV
xU
xT
bx S
bx R
bx Q
bx P
xO
xN
bx M
bx L
bx K
bx J
xI
bx H
bx G
bx F
bx E
bx D
bx C
b0 B
xA
x@
x?
bx >
bx =
x<
bx ;
x:
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
x3
bx 2
bx 1
bx 0
x/
bx .
bx -
bx ,
x+
x*
bx )
bx (
b110111010 '
b1101 &
bx %
b10000000000000000000000000000011 $
0#
0"
b110000 !
$end
#500
0I
b100 7
b100 y"
b0 .
b0 P#
b10011 H
b10011 9#
b10011 A#
b100 J
b100 s"
b100 8#
b100 S#
b0 0
b0 M#
b0 O#
b0 (
b0 7#
b0 %"
b0 @#
b0 R#
1"
#1000
0"
#1500
1O
0U
0+
b0 X
b0 I"
b0 ~"
0^
0W
0V
b11 `
b11 J"
b11 {"
0T
b11011 ]
1_
1N
0x"
0w"
0*
b11011 K"
b0 K
b0 %#
b0 ?#
b10011 >#
b0 R
b0 "#
b0 P
b0 &#
b0 U#
b0 L
b0 r"
b0 $#
b0 W#
b0 Q
b0 '#
b0 T#
b0 M
b0 q"
b0 ##
b0 V#
b0 [
b0 |"
b0 Z
b0 }"
b10011 S
b10011 H"
b10011 p"
b10011 !#
0\
b10011 Y
b10011 ;#
b10011 =#
b100 a
b100 (#
b100 <#
b0 b
b0 )#
b0 :#
1"
#2000
0"
#2500
b0 !"
b0 <"
b0 Q"
b0 n"
1t
b0 x
b0 ."
b0 S"
b0 -
b0 3"
b0 9"
b0 ,
b0 8"
b0 :"
b0 |
b0 ,"
b0 m"
b0 }
b0 6"
b0 l"
b0 ~
b0 1"
b0 k"
0r
b0 ""
b0 7"
b0 D"
b0 #"
b0 ;"
b0 A"
0c
b0 y
b0 G"
b0 R"
b0 o"
b10011 k
b10011 W"
b10011 j"
b10011 u"
b10011 /#
b0 j
b0 U"
b0 t"
b0 1#
b0 e
b0 T"
b0 h"
b0 5#
b0 f
b0 i"
b0 4#
b0 h
b0 -"
b0 C"
b0 3#
b0 i
b0 2"
b0 2#
b0 ?"
b0 q
b0 >"
b0 Y"
b0 ,#
b0 p
b0 ="
b0 -#
b0 d
b0 B"
b0 E"
b0 6#
1g
0m
0l
0n
b0 o
b0 X"
b0 v"
b0 .#
1v
b11 w
b11 @"
b11 +#
b11011 s
0u
b100 z
b100 V"
b100 0#
b0 {
b0 F"
b0 *#
1"
#3000
0"
#3500
0)"
b0 ("
b0 L"
b0 9
b0 M"
b0 \#
b0 N"
0$"
b0 )
b0 *"
b0 /"
b0 4"
b0 '"
b0 ;
b0 a"
b0 e"
b0 =
b0 `"
b0 d"
b0 F#
b10011 >
b10011 ]"
b10011 c"
b10011 D#
1<
0?
b0 D
b0 ["
b0 8
b0 b"
b0 Z#
b0 E
b0 O"
b0 Z"
b0 B#
0@
b0 C
b0 \"
b0 C#
0A
0:
b0 F
b0 _"
b100 G
b100 ^"
b100 E#
1"
#4000
0"
#4500
b0 &"
b0 +"
b0 0"
b0 5"
b0 X#
b0 [#
b10011 2
b10011 g"
b10011 J#
b0 1
b0 f"
b0 L#
b0 Y#
b0 5
b0 H#
b0 N#
1/
03
b0 4
b0 I#
b100 6
b100 K#
1"
#5000
0"
#5500
1"
#6000
0"
1#
#6500
b1000 7
b1000 y"
b11000000000000000000100000110111 H
b11000000000000000000100000110111 9#
b11000000000000000000100000110111 A#
b1000 J
b1000 s"
b1000 8#
b1000 S#
b100 (
b100 7#
b100 %"
b100 @#
b100 R#
1"
#7000
0"
#7500
0O
b0 `
b0 J"
b0 {"
b0 ]
0_
0N
b1100 7
b1100 y"
b0 K"
b11100000000000000000100010110111 H
b11100000000000000000100010110111 9#
b11100000000000000000100010110111 A#
b1100 J
b1100 s"
b1100 8#
b1100 S#
b110111 >#
b10000 R
b10000 "#
b1100000 Z
b1100000 }"
b110111 S
b110111 H"
b110111 p"
b110111 !#
b1000 (
b1000 7#
b1000 %"
b1000 @#
b1000 R#
b11000000000000000000100000110111 Y
b11000000000000000000100000110111 ;#
b11000000000000000000100000110111 =#
b1000 a
b1000 (#
b1000 <#
b100 b
b100 )#
b100 :#
1"
#8000
0"
#8500
b10000 7
b10000 y"
b10001 R
b10001 "#
b1110000 Z
b1110000 }"
b1000 ?"
b100 y
b100 G"
b100 R"
b100 o"
b11110000000000000000100100110111 H
b11110000000000000000100100110111 9#
b11110000000000000000100100110111 A#
b10000 J
b10000 s"
b10000 8#
b10000 S#
b11100000000000000000100010110111 Y
b11100000000000000000100010110111 ;#
b11100000000000000000100010110111 =#
b1100 a
b1100 (#
b1100 <#
b1000 b
b1000 )#
b1000 :#
b110111 k
b110111 W"
b110111 j"
b110111 u"
b110111 /#
b10000 j
b10000 U"
b10000 t"
b10000 1#
b1100000 p
b1100000 ="
b1100000 -#
0g
0v
b0 s
b0 w
b0 @"
b0 +#
b1000 z
b1000 V"
b1000 0#
b100 {
b100 F"
b100 *#
b1100 (
b1100 7#
b1100 %"
b1100 @#
b1100 R#
1"
#9000
0"
#9500
b10100 7
b10100 y"
b11000000000000000000100110010111 H
b11000000000000000000100110010111 9#
b11000000000000000000100110010111 A#
b10100 J
b10100 s"
b10100 8#
b10100 S#
b1000 y
b1000 G"
b1000 R"
b1000 o"
b10010 R
b10010 "#
b1111000 Z
b1111000 }"
b10000 (
b10000 7#
b10000 %"
b10000 @#
b10000 R#
b10000 =
b10000 `"
b10000 d"
b10000 F#
b110111 >
b110111 ]"
b110111 c"
b110111 D#
0<
b100 F
b100 _"
b1000 G
b1000 ^"
b1000 E#
b10001 j
b10001 U"
b10001 t"
b10001 1#
b1110000 p
b1110000 ="
b1110000 -#
b1100 z
b1100 V"
b1100 0#
b1000 {
b1000 F"
b1000 *#
b11110000000000000000100100110111 Y
b11110000000000000000100100110111 ;#
b11110000000000000000100100110111 =#
b10000 a
b10000 (#
b10000 <#
b1100 b
b1100 )#
b1100 :#
1"
#10000
0"
#10500
b11000 7
b11000 y"
b10111 >#
b10011 R
b10011 "#
b1100000 Z
b1100000 }"
b10111 S
b10111 H"
b10111 p"
b10111 !#
b1100 y
b1100 G"
b1100 R"
b1100 o"
b11100000000000000000101000010111 H
b11100000000000000000101000010111 9#
b11100000000000000000101000010111 A#
b11000 J
b11000 s"
b11000 8#
b11000 S#
b11000000000000000000100110010111 Y
b11000000000000000000100110010111 ;#
b11000000000000000000100110010111 =#
b10100 a
b10100 (#
b10100 <#
b10000 b
b10000 )#
b10000 :#
b10010 j
b10010 U"
b10010 t"
b10010 1#
b1111000 p
b1111000 ="
b1111000 -#
b10000 z
b10000 V"
b10000 0#
b1100 {
b1100 F"
b1100 *#
b10001 =
b10001 `"
b10001 d"
b10001 F#
b1000 F
b1000 _"
b1100 G
b1100 ^"
b1100 E#
b110111 2
b110111 g"
b110111 J#
b10000 1
b10000 f"
b10000 L#
b10000 Y#
0/
b1000 6
b1000 K#
b10100 (
b10100 7#
b10100 %"
b10100 @#
b10100 R#
1"
#11000
0"
#11500
b11100 7
b11100 y"
b11110000000000000000101010010111 H
b11110000000000000000101010010111 9#
b11110000000000000000101010010111 A#
b11100 J
b11100 s"
b11100 8#
b11100 S#
b10000 y
b10000 G"
b10000 R"
b10000 o"
b10100 R
b10100 "#
b1110000 Z
b1110000 }"
b11000 (
b11000 7#
b11000 %"
b11000 @#
b11000 R#
b10001 1
b10001 f"
b10001 L#
b10001 Y#
b1100 6
b1100 K#
b10010 =
b10010 `"
b10010 d"
b10010 F#
b1100 F
b1100 _"
b10000 G
b10000 ^"
b10000 E#
b10111 k
b10111 W"
b10111 j"
b10111 u"
b10111 /#
b10011 j
b10011 U"
b10011 t"
b10011 1#
b1100000 p
b1100000 ="
b1100000 -#
b10100 z
b10100 V"
b10100 0#
b10000 {
b10000 F"
b10000 *#
b11100000000000000000101000010111 Y
b11100000000000000000101000010111 ;#
b11100000000000000000101000010111 =#
b11000 a
b11000 (#
b11000 <#
b10100 b
b10100 )#
b10100 :#
1"
#12000
0"
#12500
b100000 7
b100000 y"
b10101 R
b10101 "#
b1111000 Z
b1111000 }"
b10100 y
b10100 G"
b10100 R"
b10100 o"
b10011 H
b10011 9#
b10011 A#
b100000 J
b100000 s"
b100000 8#
b100000 S#
b11110000000000000000101010010111 Y
b11110000000000000000101010010111 ;#
b11110000000000000000101010010111 =#
b11100 a
b11100 (#
b11100 <#
b11000 b
b11000 )#
b11000 :#
b10100 j
b10100 U"
b10100 t"
b10100 1#
b1110000 p
b1110000 ="
b1110000 -#
b11000 z
b11000 V"
b11000 0#
b10100 {
b10100 F"
b10100 *#
b10011 =
b10011 `"
b10011 d"
b10011 F#
b10111 >
b10111 ]"
b10111 c"
b10111 D#
b10000 F
b10000 _"
b10100 G
b10100 ^"
b10100 E#
b10010 1
b10010 f"
b10010 L#
b10010 Y#
b10000 6
b10000 K#
b11100 (
b11100 7#
b11100 %"
b11100 @#
b11100 R#
1"
#13000
0"
#13500
1O
b11 `
b11 J"
b11 {"
b11011 ]
1_
1N
b100100 7
b100100 y"
b11011 K"
b100100 J
b100100 s"
b100100 8#
b100100 S#
b11000 y
b11000 G"
b11000 R"
b11000 o"
b10011 >#
b0 R
b0 "#
b0 Z
b0 }"
b10011 S
b10011 H"
b10011 p"
b10011 !#
b100000 (
b100000 7#
b100000 %"
b100000 @#
b100000 R#
b10111 2
b10111 g"
b10111 J#
b10011 1
b10011 f"
b10011 L#
b10011 Y#
b10100 6
b10100 K#
b10100 =
b10100 `"
b10100 d"
b10100 F#
b10100 F
b10100 _"
b11000 G
b11000 ^"
b11000 E#
b10101 j
b10101 U"
b10101 t"
b10101 1#
b1111000 p
b1111000 ="
b1111000 -#
b11100 z
b11100 V"
b11100 0#
b11000 {
b11000 F"
b11000 *#
b10011 Y
b10011 ;#
b10011 =#
b100000 a
b100000 (#
b100000 <#
b11100 b
b11100 )#
b11100 :#
1"
#14000
0"
#14500
b101000 7
b101000 y"
b0 ?"
b11100 y
b11100 G"
b11100 R"
b11100 o"
b101000 J
b101000 s"
b101000 8#
b101000 S#
b100100 a
b100100 (#
b100100 <#
b100000 b
b100000 )#
b100000 :#
b10011 k
b10011 W"
b10011 j"
b10011 u"
b10011 /#
b0 j
b0 U"
b0 t"
b0 1#
b0 p
b0 ="
b0 -#
1g
1v
b11011 s
b11 w
b11 @"
b11 +#
b100000 z
b100000 V"
b100000 0#
b11100 {
b11100 F"
b11100 *#
b10101 =
b10101 `"
b10101 d"
b10101 F#
b11000 F
b11000 _"
b11100 G
b11100 ^"
b11100 E#
b10100 1
b10100 f"
b10100 L#
b10100 Y#
b11000 6
b11000 K#
b100100 (
b100100 7#
b100100 %"
b100100 @#
b100100 R#
1"
#15000
0"
#15500
b101100 7
b101100 y"
b101100 J
b101100 s"
b101100 8#
b101100 S#
b100000 y
b100000 G"
b100000 R"
b100000 o"
b101000 (
b101000 7#
b101000 %"
b101000 @#
b101000 R#
b10101 1
b10101 f"
b10101 L#
b10101 Y#
b11100 6
b11100 K#
b0 =
b0 `"
b0 d"
b0 F#
b10011 >
b10011 ]"
b10011 c"
b10011 D#
1<
b11100 F
b11100 _"
b100000 G
b100000 ^"
b100000 E#
b100100 z
b100100 V"
b100100 0#
b100000 {
b100000 F"
b100000 *#
b101000 a
b101000 (#
b101000 <#
b100100 b
b100100 )#
b100100 :#
1"
#16000
0"
#16500
b110000 7
b110000 y"
b100100 y
b100100 G"
b100100 R"
b100100 o"
b110000 J
b110000 s"
b110000 8#
b110000 S#
b101100 a
b101100 (#
b101100 <#
b101000 b
b101000 )#
b101000 :#
b101000 z
b101000 V"
b101000 0#
b100100 {
b100100 F"
b100100 *#
b100000 F
b100000 _"
b100100 G
b100100 ^"
b100100 E#
b10011 2
b10011 g"
b10011 J#
b0 1
b0 f"
b0 L#
b0 Y#
1/
b100000 6
b100000 K#
b101100 (
b101100 7#
b101100 %"
b101100 @#
b101100 R#
1"
#17000
0"
#17500
b110100 7
b110100 y"
b1101111 H
b1101111 9#
b1101111 A#
b110100 J
b110100 s"
b110100 8#
b110100 S#
b100000 %
0#
b101000 y
b101000 G"
b101000 R"
b101000 o"
b110000 (
b110000 7#
b110000 %"
b110000 @#
b110000 R#
b100100 6
b100100 K#
b100100 F
b100100 _"
b101000 G
b101000 ^"
b101000 E#
b101100 z
b101100 V"
b101100 0#
b101000 {
b101000 F"
b101000 *#
b110000 a
b110000 (#
b110000 <#
b101100 b
b101100 )#
b101100 :#
1"
